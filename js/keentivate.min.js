/*
	Codekit Imports
	---------------

	@codekit-append "_keenLoader"
	@codekit-append "_keentivateChart"
	@codekit-append "_keentivatePie"
	@codekit-append "_keentivateBar"
	@codekit-append "_keentivateNumber"
	@codekit-append "_keentivateFunnel"
	@codekit-append "_keentivateLine"
	@codekit-append "_keentivateMultiline"

*/
var keentivate = function(token, key, options, callback) {
	var self = this;

	self.ready = false;

	var defaults = {
		keenClass: false,
		timeframe: "previous_7_days"
	};

	if(typeof(token) === "undefined") {
		self.log("You must supply a token");
		return false;
	}

	if(typeof(key) === "undefined") {
		self.log("You must supply an API Key");
		return false;
	}

	if(typeof(options) === "function") {
		callback = options;
		options = null;
	}

	if(typeof(options) === "undefined" || options === null) {
		options = {};
	}

	self.options = self.merge(defaults, options);

	//Initialize Keen

	Keen.configure(token, key);
	Keen.onChartsReady(function() {

		if(self.options.keenClass) {
			self.load(self.options.keenClass, callback);
		} else {
			if(typeof(callback) === "function") {
				callback();
			}
		}
	});
};


/* Managing Elements */
keentivate.prototype.load = function(className, callback) {
	var self = this;

	var elements = document.getElementsByClassName(className);

	if(!elements.length) {
		self.log("No elements match that class name");
		return false;
	}

	self.unload();

	self.elements = elements;

	var sentinel = 0;
	var sentinelCheck = function() {
		sentinel++;

		if(sentinel >= max && typeof(callback) === "function") {
			callback();
		}
	};

	for(var i=0, max=self.elements.length; i<max; i++) {
		var ele = self.elements[i];

		var type = ele.hasAttribute("keen-type") ? ele.getAttribute("keen-type") : "number";

		var renderFunc = self.renderNumber;
		switch(type) {
			case "number":
				renderFunc = self.renderNumber;
				break;

			case "pie":
				renderFunc = self.renderPie;
				break;

			case "bar":
				renderFunc = self.renderBar;
				break;

			case "funnel":
				renderFunc = self.renderFunnel;
				break;

			case "line":
				renderFunc = self.renderLine;
				break;

			case "multiline":
				renderFunc = self.renderMultiline;
				break;

			default:
				self.log("Invalid keen-type attribute: " + type + ".  Assuming number");
				break;
		}

		renderFunc.apply(self, [ele, sentinelCheck]);
	}

};

keentivate.prototype.unload = function() {
	var self = this;
};

/* Renders */

keentivate.prototype.renderPie = function(ele, cb) {
	var self = this;

	var chart = new keentivatePie(self, ele, cb);
};

keentivate.prototype.renderBar = function(ele, cb) {
	var self = this;

	var chart = new keentivateBar(self, ele, cb);
};

keentivate.prototype.renderNumber = function(ele, cb) {
	var self = this;

	var chart = new keentivateNumber(self, ele, cb);
};

keentivate.prototype.renderFunnel = function(ele, cb) {
	var self =this;

	var chart = new keentivateFunnel(self, ele, cb);
};

keentivate.prototype.renderLine = function(ele, cb) {
	var self =this;

	var chart = new keentivateLine(self, ele, cb);
};

keentivate.prototype.renderMultiline = function(ele, cb) {
	var self =this;

	var chart = new keentivateMultiline(self, ele, cb);
};

/* Handy Functions */

//Overwrites base with override's properties
keentivate.prototype.merge = function(base, override) {
	var self = this;

    var merged = {};
    var attrname;
    for (attrname in base) { merged[attrname] = base[attrname]; }
    for (attrname in override) { merged[attrname] = override[attrname]; }
    return merged;
};

keentivate.prototype.log = function() {
	var self = this;

	[].unshift.apply(arguments, [Date.now()]);
	[].unshift.apply(arguments, ["Keentivate"]);

	console.log.apply(console, arguments);
};


/* **********************************************
     Begin _keenLoader.js
********************************************** */

    var Keen=Keen||{configure:function(a,b,c){this._pId=a;this._ak=b;this._op=c},addEvent:function(a,b,c,d){this._eq=this._eq||[];this._eq.push([a,b,c,d])},setGlobalProperties:function(a){this._gp=a},onChartsReady:function(a){this._ocrq=this._ocrq||[];this._ocrq.push(a)}};
    (function(){var a=document.createElement("script");a.type="text/javascript";a.async=!0;a.src=("https:"==document.location.protocol?"https://":"http://")+"dc8na2hxrj29i.cloudfront.net/code/keen-2.0.0-min.js";var b=document.getElementsByTagName("script")[0];b.parentNode.insertBefore(a,b)})();

/* **********************************************
     Begin _keentivateChart.js
********************************************** */

var keentivateChart = function() {
	this.init(arguments);
};

keentivateChart.prototype.super = function(keentivate, element) {
	var self = this;

	if(typeof(keentivate) === "undefined") {
		throw new Error("You have to pass keentivate to keentivateChart");
	}

	self.k = keentivate;

	if(typeof(element) === "undefined") {
		self.k.log("You have to pass an element to keentivateChart");
	}

	self.element = element;
	self.stop = false;

	if(typeof(self.options) === "undefined") {
		self.options = {};
	}

	var defaults = {
		metric: {
			analysisType: "count"
		},
		label: {

		}
	};

	self.options = self.k.merge(defaults, self.options);

	self.startRender();
};

keentivateChart.prototype.requiredAttributes = {
	"event": "eventCollection"
};

keentivateChart.prototype.optionalMetricAttributes = {
	"metric-type": "analysisType",
	"filters": "filters",
	"timeframe": "timeframe",
	"group": "groupBy",
	"target": "targetProperty",
	"timeframe": "timeframe",
	"interval": "interval"
};

keentivateChart.prototype.optionalLabelAttributes = { 
	"label": "label",
	"title": "title",
	"prefix": "prefix",
	"suffix": "suffix",
	"height": "height",
	"width": "width",
	"font": "font-family",
	"font-color": "fontColor",
	"border-radius": "border-radius",
	"color": "color",
	"colors": "colors",
	"number-background": "number-background-color",
	"label-background": "label-background-color",
	"x": "xAxisLabel",
	"y": "yAxisLabel",
	"x-angle": "xAxisLabelAngle",
	"background": "backgroundColor",
	"chart-height": "chartAreaHeight",
	"chart-width": "chartAreaWidth",
	"chart-top": "chartAreaTop",
	"chart-left": "chartAreaLeft",
	"line-width": "lineWidth",
	"show-legend": "showLegend",
	"label-mapping": "labelMapping",
	"minimum-slice": "minimumSlicePercentage"
};

//Order of operations function.  Stored in prototype so that child objects can override it.
keentivateChart.prototype.startRender = function() {
	var self = this;

	self.checkRequiredFields();
	self.getMetric();

	if(typeof(self.draw) === "function") {
		self.draw();
	}
};

keentivateChart.prototype.getMetric = function() {
	var self = this;

	if(self.stop) {
		return false;
	}

	self.metric = new Keen.Metric(self.getField("event"), self.getMetricOptions());

	var filters = self.getFilters();

	for(var i=0, max=filters.length; i<max; i++) {
		var filter = filters[i];
		self.metric.addFilter(filter.property, filter.operator, filter.value);
	}
};

keentivateChart.prototype.getFilters = function() {
	var self = this;

	var replacements = {
		"=": "%DOSPLIT%eq%DOSPLIT%",
		"!=": "%DOSPLIT%ne%DOSPLIT%",
		"<": "%DOSPLIT%lt%DOSPLIT%",
		"<= ": "%DOSPLIT%lte%DOSPLIT%",
		">": "%DOSPLIT%gt%DOSPLIT%",
		">=": "%DOSPLIT%gte%DOSPLIT%",
		"\\?": "%DOSPLIT%exists%DOSPLIT%"
	};

	var filterAttr = self.getField("filter");

	if(filterAttr) {
		//Do replacements en masse, so we don't have to loop on each filter
		for(key in replacements) {
			filterAttr = filterAttr.replace(new RegExp(key, "g"), replacements[key]);
		}

		var filters = filterAttr.split("|");
		var filterArray = [];

		for(var i=0,max=filters.length; i<max; i++) {
			var trimmed = filters[i].replace(/^\s\s*/, '').replace(/\s\s*$/, '');

			while(trimmed.indexOf("  ") > -1) {
				trimmed.replace("  ", " ");
			}

			//Fake out spaces until after the split, please.


			var split = trimmed.split("%DOSPLIT%");
			if(split.length == 3) {

				if(split[2] === "true") {
					split[2] = true;
				} else if(split[2] === "false") {
					split[2] = false;
				}
				
				filterArray.push({
					property: split[0],
					operator: split[1],
					value: split[2]
				});
			}
		}

		return filterArray;
	} else {
		return [];
	}
}

keentivateChart.prototype.checkRequiredFields = function() {
	var self = this;

	if(self.stop) {
		return false;
	}

	if(typeof(self.requiredAttributes) === "undefined") {
		self.k.log("No required attributes defined");
		self.stop = true;
		return false;
	}

	var failed = false;

	for(var key in self.requiredAttributes) {
		if(!self.element.hasAttribute("keen-" + key) && !(key === "timeframe" && self.element.hasAttribute("keen-start") && self.element.hasAttribute("keen-end"))) {
			self.k.log("Required key not set on keen element: "+key);
			failed = true;
			break;
		}
	}

	if(failed) {
		self.stop  = true;
	}

	return !failed;
};

keentivateChart.prototype.getMetricOptions = function() {
	return this.k.merge(this.options.metric, this.getOptions(this.optionalMetricAttributes));
};

keentivateChart.prototype.getLabelOptions = function() {
	return this.getOptions(this.optionalLabelAttributes);
};

keentivateChart.prototype.getOptions = function(optionFields) {
	var self = this;

	if(self.stop) {
		return false;
	}

	var options = {};

	for(var key in optionFields) {
		if(self.element.hasAttribute("keen-"+key)) {
			options[optionFields[key]] = self.element.getAttribute("keen-"+key);
		} else if(key === "timeframe" && self.element.hasAttribute("keen-start") && self.element.hasAttribute("keen-end")) { //Allow start & end timeframes
			options[optionFields[key]] = {
				start: self.element.getAttribute("keen-start"),
				end: self.element.getAttribute("keen-end")
			}
		}
	}

	return options;
};

keentivateChart.prototype.getField = function(field) {
	var self = this;

	if(self.stop) {
		return false;
	}

	if(!self.element.hasAttribute("keen-"+field)) {
		return false;
	}

	return self.element.getAttribute("keen-"+field);
};

keentivateChart.prototype.onRender = function() {
	var self = this;

	if(self.element.hasAttribute("keen-on-render")) {
		var func = self.element.getAttribute("keen-on-render");

		eval(func);
	}
};


/* **********************************************
     Begin _keentivatePie.js
********************************************** */

/* globals keentivateChart */
var keentivatePie = function() {
	this.init(arguments);
};

//Faux inheritance
keentivatePie.prototype = Object.create(keentivateChart.prototype);

keentivatePie.prototype.requiredAttributes = {
	"event": "eventCollection",
	"group": "groupBy"	
}

keentivatePie.prototype.init = function() {
	var self = this;

	self.chartType = "pie";

	self.super.apply(self, arguments[0]);
};

keentivatePie.prototype.draw = function() {
	var self = this;

	if(self.stop) {
		return false;
	}

	var chart = new Keen.PieChart(self.metric, self.getLabelOptions());

	chart.draw(self.element);
};


/* **********************************************
     Begin _keentivateBar.js
********************************************** */

/* globals keentivateChart */
var keentivateBar = function() {
	this.init(arguments);
};

//Faux inheritance
keentivateBar.prototype = Object.create(keentivateChart.prototype);

keentivateBar.prototype.requiredAttributes = {
	"event": "eventCollection",
	"group": "groupBy"	
}

keentivateBar.prototype.init = function() {
	var self = this;

	self.chartType = "bar";

	self.super.apply(self, arguments[0]);
};

keentivateBar.prototype.draw = function() {
	var self = this;

	if(self.stop) {
		return false;
	}

	var chart = new Keen.BarChart(self.metric, self.getLabelOptions());

	chart.draw(self.element);
};


/* **********************************************
     Begin _keentivateNumber.js
********************************************** */

/* globals keentivateChart */
var keentivateNumber = function() {
	this.init(arguments);
};

//Faux inheritance
keentivateNumber.prototype = Object.create(keentivateChart.prototype);

keentivateNumber.prototype.init = function() {
	var self = this;

	self.chartType = "number";

	self.super.apply(self, arguments[0]);
};

keentivateNumber.prototype.draw = function() {
	var self = this;

	if(self.stop) {
		return false;
	}

	var chart = new Keen.Number(self.metric, self.getLabelOptions());
	chart.draw(self.element);
};


/* **********************************************
     Begin _keentivateFunnel.js
********************************************** */

/* globals keentivateChart */
var keentivateFunnel = function() {
	this.init(arguments);
};

//Faux inheritance
keentivateFunnel.prototype = Object.create(keentivateChart.prototype);

keentivateFunnel.prototype.requiredAttributes = {
	"watch": "actorProperty"
}

keentivateFunnel.prototype.optionalMetricAttributes = {
	"watch": "actorProperty"
};

keentivateFunnel.prototype.init = function() {
	var self = this;

	self.chartType = "pie";

	self.super.apply(self, arguments[0]);
};

keentivateFunnel.prototype.draw = function() {
	var self = this;

	if(self.stop) {
		return false;
	}

	var chart = new Keen.Funnel(self.steps, self.getMetricOptions());

	chart.draw(self.element, self.getLabelOptions());
};

keentivateFunnel.prototype.getSteps = function() {
	var self = this;

	var lis = self.element.getElementsByTagName("li");

	if(!lis.length) {
		self.stop = true;
		self.k.log("You must provide steps for funnels")
		return false;
	}

	self.steps = [];

	for(var i=0, max=lis.length; i<max; i++) {
		var li = lis[i];

		if(!li.hasAttribute("keen-event")) {
			self.stop = true;
			self.k.log("All steps must have an event attribute");
			return false;
		}

		var ev = li.getAttribute("keen-event");

		var filters = self.getStepFilters(li);

		var step = new Keen.Step(ev);
		for(var j=0,fmax=filters.length;j<fmax;j++) {
			step.addFilter(filters[j].property, filters[j].operator, filters[j].value)
		}

		self.steps.push(step);
	}

};

keentivateFunnel.prototype.getStepFilters = function(ele) {
	var self = this;

	var replacements = {
		"=": "%DOSPLIT%eq%DOSPLIT%",
		"!=": "%DOSPLIT%ne%DOSPLIT%",
		"<": "%DOSPLIT%lt%DOSPLIT%",
		"<= ": "%DOSPLIT%lte%DOSPLIT%",
		">": "%DOSPLIT%gt%DOSPLIT%",
		">=": "%DOSPLIT%gte%DOSPLIT%",
		"\\?": "%DOSPLIT%exists%DOSPLIT%"
	};

	if(!ele.hasAttribute("keen-filter")) {
		return [];
	}

	var filterAttr = ele.getAttribute("keen-filter");

	if(filterAttr) {
		//Do replacements en masse, so we don't have to loop on each filter
		for(key in replacements) {
			filterAttr = filterAttr.replace(new RegExp(key, "g"), replacements[key]);
		}

		var filters = filterAttr.split("|");
		var filterArray = [];

		for(var i=0,max=filters.length; i<max; i++) {
			var trimmed = filters[i].replace(/^\s\s*/, '').replace(/\s\s*$/, '');

			while(trimmed.indexOf("  ") > -1) {
				trimmed.replace("  ", " ");
			}

			//Fake out spaces until after the split, please.


			var split = trimmed.split("%DOSPLIT%");
			if(split.length == 3) {

				if(split[2] === "true") {
					split[2] = true;
				} else if(split[2] === "false") {
					split[2] = false;
				}
				
				filterArray.push({
					property: split[0],
					operator: split[1],
					value: split[2]
				});
			}
		}

		return filterArray;
	} else {
		return [];
	}
}

keentivateFunnel.prototype.startRender = function() {
	var self = this;

	self.checkRequiredFields();
	self.getSteps();
	self.draw();
	
};


/* **********************************************
     Begin _keentivateLine.js
********************************************** */

/* globals keentivateChart */
var keentivateLine = function() {
	this.init(arguments);
};

//Faux inheritance
keentivateLine.prototype = Object.create(keentivateChart.prototype);

keentivateLine.prototype.requiredAttributes = {
	"timeframe": "timeframe",
	"interval": "interval",
	"event": "eventCollection"
}

keentivateLine.prototype.init = function() {
	var self = this;

	self.chartType = "line";

	self.super.apply(self, arguments[0]);
};

keentivateLine.prototype.getMetric = function() {
	var self = this;

	if(self.stop) {
		return false;
	}

	self.metric = new Keen.Series(self.getField("event"), self.getMetricOptions());

	var filters = self.getFilters();

	for(var i=0, max=filters.length; i<max; i++) {
		var filter = filters[i];
		self.metric.addFilter(filter.property, filter.operator, filter.value);
	}
};

keentivateLine.prototype.draw = function() {
	var self = this;

	if(self.stop) {
		return false;
	}

	var chart = new Keen.LineChart(self.metric, self.getLabelOptions());
	chart.draw(self.element);
};


/* **********************************************
     Begin _keentivateMultiline.js
********************************************** */

/* globals keentivateChart */
var keentivateMultiline = function() {
	this.init(arguments);
};

//Faux inheritance
keentivateMultiline.prototype = Object.create(keentivateChart.prototype);

keentivateMultiline.prototype.requiredAttributes = {
	"timeframe": "timeframe",
	"interval": "interval",
	"event": "eventCollection",
	"group": "groupBy"
}

keentivateMultiline.prototype.init = function() {
	var self = this;

	self.chartType = "line";

	self.super.apply(self, arguments[0]);
};

keentivateMultiline.prototype.getMetric = function() {
	var self = this;

	if(self.stop) {
		return false;
	}

	console.log(self.getMetricOptions());
	self.metric = new Keen.Series(self.getField("event"), self.getMetricOptions());

	console.log(self.getFilters());
	var filters = self.getFilters();

	for(var i=0, max=filters.length; i<max; i++) {
		var filter = filters[i];
		self.metric.addFilter(filter.property, filter.operator, filter.value);
	}
};

keentivateMultiline.prototype.draw = function() {
	var self = this;

	if(self.stop) {
		return false;
	}

	var chart = new Keen.MultiLineChart(self.metric, self.getLabelOptions());
	chart.draw(self.element);
};
